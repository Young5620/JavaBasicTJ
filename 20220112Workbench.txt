SELECT ~ FROM (~WHERE) 
: 테이블에서 데이터를 추출하는 기능 / 실제 데이터베이스의 내용을 변경하지는 않는다.

CREATE TABLE `shop`.`product` (
  `product_name` CHAR(4) NOT NULL,
  `cost` INT NOT NULL,
  `make_date` DATE NULL,
  `company` CHAR(5) NULL,
  `amount` INT NOT NULL,
  PRIMARY KEY (`product_name`));

데이터삽입
INSERT INTO `shop`.`member` (`member_id`, `member_name`, `member_addr`) VALUES ('tess', '나훈아', '경기부천');
INSERT INTO `shop`.`member` (`member_id`, `member_name`, `member_addr`) VALUES ('hero', '임영웅', '서울은평');
INSERT INTO `shop`.`member` (`member_id`, `member_name`, `member_addr`) VALUES ('iyou', '아이유', '인천남구');
INSERT INTO `shop`.`member` (`member_id`, `member_name`, `member_addr`) VALUES ('jyp', '박진영', '경기고양');

데이터수정
UPDATE `shop`.`member` SET `member_addr` = '서울강남' WHERE (`member_id` = 'hero');

데이터삭제
DELETE FROM `shop`.`member` WHERE (`member_id` = 'jyp');

INSERT
UPDATE
DELETE

TINYINT -128~127
SMALLINT -32768~32767까지
INT -21억~21억
BIGINT 900경

CHAR 1~255글자/고정길이 자릿수가 고정 -> CHAR(10) 'abc' 10자리를 모두 확보 후 3개 사용 7개는 남김
VARCHAR 1~16000정도까지/가변길이 문자형 -> VARCHAR(10) 'abc' 3자리만 사용
--------------------------------------------------------------------------------------------------------------
##내부조인
join은 두개의 테이블을 서로 묶어서 하나의 결과를 만드는 것

마켓 데이터베이스에서 회원테이블과 구매테이블

일대 다 관계 - one to many
테이블은 하나로 구성되는 것보다 여러 정보를 주제에 따라 분리하여 저장하는 것이 효율적이다.
이 분리된 테이블은 서로 관계를 맺고 있다.
market_db는 회원테이블의 아이디와 구매테이블의 아이디가 일대 다관계이다.
일대 다관계란 한쪽 테이블에는 하나의 값만 존재하지만 연결된 다른 테이블에는 여러개의 값이 존재할 수 있는 관계를 말한다.
즉 한명의 회원이 구매를 여러번 할 수 있다. 구매테이블의 아이디는 기본키가 아니라 외래키(foreign key)로 설정해야 한다.
일대다관계는 주로 기본키와 외래키로 관계를 맺는다. 일대다 관계를 또다른 표현으로 PK-FK관계라고도 한다.

회사원테이블 - 급여테이블
학생테이블 - 성적테이블
제품테이블 - 판매테이블

우리사이트에서 한번이라도 구매한 기록이 있는 회원들에게 감사선물을 제공하려고한다. 
한번이상 구매한 모든 회원의 정보를 출력하시오
SELECT 열들의목록 *
FROM 테이블1 
JOIN 테이블2
on 조인조건
WHERE 조건;
 
SELECT buy.* 
	FROM buy 
	JOIN member
    ON buy.mem_id = member.mem_id;
->구매이력이 있는 전원

SELECT DISTINCT B.mem_id, M.mem_name, M.addr
	FROM buy B
	JOIN member M
    ON B.mem_id = M.mem_id;
->마무리 하나로 줄여준다. DISTINCT

구매테이블에는 물건을 구매한 회원의 아이디와 물건의 정보만 있다. 
이 물건의 구매자에 대한 정보는 회원테이브렝 있기 때문에 결합하는것이 조인이다.
구매테이블에서 어떤 아이디를 가진 사람의 정보를 얻기 위해서는 다음과같이 검색한다.
----------------------------------------------------------------------------------------------
##외부조인
내부조인은 두테이블에 모두 데이터가 있어야만 결과가 나온다. 외부조인은 한쪽만 데이터가 있어도 결과가 나온다.
두테이블을 조인할 때 필요한 내용이 한쪽 테이블에만 있어도 결과를 추출할 수 있다.

SELECT [열들의목록 *]
FROM [테이블1] 
[LEFT/RIGHT/FULL] OUTER JOIN [테이블2]
ON [조인조건]
WHERE [검색조건];

LEFT OUTER JOIN 왼쪽 테이블의 내용은 모두 출력되어야한다.

회원으로 가입만하고 한번도 구매한 적이 없는 회원의 목록출력
(한번도 구매하지 않았기 때문에 구매테이블에 NULL이있다.
SELECT B.mem_id, M.mem_name, M.addr
	FROM member M
	LEFT OUTER JOIN buy B
    ON B.mem_id = M.mem_id
WHERE B.mem_id is null;
------------------------------------------------------------------------------------------------
##제약조건
테이블은 기본키, 외래키와 같은 제약조건을 설정할 수 있다. 
제약조건은 테이블을 구성하는 핵심개념으로 잘 활용하면 오류를 줄여 완전한 코드를 만들 수 있다. 

테이블을 만들때 구조에 필요한 제약조건을 설정한다. 기본키와 외래키가 대표적인 제약조건이다.
기본키는 학번, 사번, 주민번호같은 고유한데이터를 의미하는 열에 설정
외래키는 기본키와 연결되는 열에 지정한다.

키를 이력하는 열에는 300cm를 넘는 사람은 없다. 
실수로 300이 넘는 값을 입력하는 것을 방지하는 제약조건을 check이라고 한다.
또 국적을 입력하는데 대부분이 한국인데 매번 입력하기가 귀찮다면 제약조건으로 기본값을 설정할 수 있다.
값을 반드시 꼭 입력하게 만드는 제약조건을 NOT NULL제약조건이라 한다.

제약조건이 많으면 데이터의 오류가 적고 튼튼해진다.

CONSTRAINT은 데이터의 무결성을 유지하기 위해 제한하는 조건이다.
결함을 미리 방지하기 위해 회원테이블의 아이디를 기본키 PRIMARY KEY로 지정하면 '중복을 허용하지 않고 
NULL값도 허용하지 않음'으로 설정되어 실수로 중복된 아이디를 넣으려고하면 입력조차 불가능해진다.

※
PRIMARY KEY
FOREIGN KEY
UNIQUE
CHECK

기본키 제약조건
대부분의 테이블은 기본키를 가져야한다. 
없어도 테이블 구성은 가능하지만 실무에서는 기본키를 설정해야 중복된 값을 허용하지 않게된다.
기본키는 테이블마다 1개만 가질 수 있다.
아이디, 주민번호, 이메일
테이블의 특성을 가장 잘 반영하는 열을 선택하는 것이 좋다.
열 이름 뒤에 PRIMARY KEY를 붙여서 기본키로 설정

PK 설정하는 방법 1
CREATE TABLE `member` (
  `product_name` CHAR(4) PRIMARY KEY,
  `cost` INT,
  `make_date` DATE NULL,
  `company` CHAR(5) NULL,
  `amount` INT NOT NULL);

PK 설정하는 방법 2
CREATE TABLE `member` (
  `product_name` CHAR(4),
  `cost` INT,
  `make_date` DATE NULL,
  `company` CHAR(5) NULL,
  `amount` INT NOT NULL,
 PRIMARY KEY (`product_name`));

PK 설정하는 방법 3
ALTER TABLE member;
	ADD CONSTRAINT
	PRIMARY KEY(mem_id);

PK 설정하는 방법 4
CREATE TABLE `member` (
  `product_name` CHAR(4),
  `cost` INT,
  `make_date` DATE NULL,
  `company` CHAR(5) NULL,
  `amount` INT NOT NULL)
  CONSTRINT PRIMARY PK_MEMBER_MEM_ID(mem_id);

----------------------------------------------------------------------------------------------
외래키 제약조건
FOREIGN KEY
두테이블 사이의 관계를 연결해주고 그 결과ㅗ 데이터의 무결성을 보장해주는 역활을 한다.
외래키가 설정된 열은 반드시 다른 테이블의 기본키와 동일하다.
기본키가 있는 테이블을 '기준테이블' 외래키가 있는 테이블은 '참조테이블'이라고 부른다.

기준테이블	참조테이블
아이디		아이디
PK		FK 

참조테이블이 참조하는 기준테이블의 열은 반드시 기본키 또는 고유키로 설정되어 있어야만 한다.

외래키 설정하는 방법 1
CREATE TABLE `member` (
  `product_name` CHAR(4),
  `cost` INT,
  `make_date` DATE NULL,
  `company` CHAR(5) NULL,
  `amount` INT NOT NULL,
 FOREIGN KEY (`product_name`) REFERENCES member(mem_id)
);

외래키 설정하는 방법 2
CREATE TABLE `member` (
  `product_name` CHAR(4),
  `cost` INT,
  `make_date` DATE NULL,
  `company` CHAR(5) NULL,
  `amount` INT NOT NULL
);
ALTER TABLE member
	ADD CONSTRAINT
	FOREIGN KEY(mem_id)
	REFERENCES member(mem_id);

※ 기본키- 외래키 관계가 설정되면 기준테이블의 열은 변경되거나 삭제되지 않는다.
기준테이블의 열 이름이 변경될 때 참조테이블의 열 이름도 자동으로 변경되면 더 효율적일 것 같다.
즉, 회원테이블의 BLK가 PINK로 변경되면 자동으로 구매테이블의 BLK도 PINK로 변경된다.

※DATABASE -> REVERSE ENGINE 그림으로
---------------------------------------------------------------------------------------------------------
고유키 제약조건
UNIQUE
중복되지 않는 유일한 값을 입력해야하는 조건

UNIQUE 설정하는 방법
CREATE TABLE `member` (
  `product_name` CHAR(4) PRIMARY KEY,
  `cost` INT,
  `make_date` DATE NULL,
  `company` CHAR(5) NULL UNIQUE,
  `amount` INT NOT NULL);
---------------------------------------------------------------------------------------------------------
CHECK 제약조건
입력할 때 데이터를 점검하는 기능, 
어떤열에 특정값이 들어가지 않도록 하거나 '남/여' 둘 중에 하나만 입력되도록 할 수 있다.

Check 설정하는 방법 1
CREATE TABLE `member` (
  `product_name` CHAR(4) PRIMARY KEY,
  `cost` INT,
  `make_date` DATE NULL,
  `company` CHAR(5) NULL UNIQUE,
  `amount` INT NOT NULL,
  `gender` CHAR(5) CHECK(gender IN('남','여')),
  `height` TINYINT CHECK(height>=100)
);

Check 설정하는 방법 2
CREATE TABLE `member` (
  `product_name` CHAR(4) PRIMARY KEY,
  `cost` INT,
  `make_date` DATE NULL,
  `company` CHAR(5) NULL UNIQUE,
  `amount` INT NOT NULL,
  `gender` CHAR(5),
  `height` TINYINT
);
ALTER TABLE member
	ADD CONSTRAINT
	CHECK(gender IN('남','여')
	CHECK(height>=100);

--------------------------------------------------------------------------------------------------------------
기본값 Default
값을 입력하지 않았을때 자동으로 입력될 값을 미리 지정해 놓는 방법이다.

default 설정하는 방법 1
CREATE TABLE `member` (
  `product_name` CHAR(4) PRIMARY KEY,
  `cost` INT,
  `make_date` DATE NULL,
  `company` CHAR(5) default '용감한형제들',
  `amount` INT NOT NULL,
  `gender` CHAR(5) CHECK(gender IN('남','여')),
  `height` TINYINT CHECK(height>=100)
);

default 설정하는 방법 2
CREATE TABLE `member` (
  `product_name` CHAR(4) PRIMARY KEY,
  `cost` INT,
  `make_date` DATE NULL,
  `company` CHAR(5),
  `amount` INT NOT NULL,
  `gender` CHAR(5) CHECK(gender IN('남','여')),
  `height` TINYINT CHECK(height>=100)
);
ALTER TABLE member
	ALTER COLUMN company SET DEFAULT '용감한형제들';
------------------------------------------------------------------------------------------------------------
null값 허용 NOT NULL
------------------------------------------------------------------------------------------------------------
##VIEW 가상의테이블
일반 사용자의 입장에서는 테이블과 동일하게 보인다.
테이블의 필요한 내용만 골라서 보이도록 할 수 있다.

뷰는 테이블과 아주 밀접하게 연관되어있다. 뷰는 한번 생성하면 테이블이라고 생각해도 될 정도로 테이블과
동일한개체로 취급한다.
뷰는 실제 데이터를 가지고 있지 않다. 뷰에 접근하는 순간 SELECT이 실행되고 그 결과가 화면에 출력되는 방식이다.

뷰는 단순뷰와 복합뷰로 나뉜다.
단순뷰는 하나의 테이블과 연관된 뷰를 의미하고 복합뷰는 2개 이상의 테이블과 연관된 뷰를 말한다.

뷰의 이름만 보고서도 어떤 테이블과 연계된 뷰인지 알 수 있도록 v_접두어를 사용하여 이름을 만든다.
v_테이블명

CREATE VIEW v_이름
AS
	SELECT 구문;

만드는방법
CREATE VIEW v_member
AS 
	SELECT mem_id, mem_name, addr
	FROM market_db.member;
보는 방법
SELECT * FROM v_member;


필요한 열만 추출하여 보거나 조건식을 넣을 수도 있다.
결과는 테이블에서 추출하여 보는 것과 동일하다.

뷰를 많이 사용하게 되는 이유
1. 보안이슈 Security
 인터넷 홈쇼핑, 회원의 정보확인, 알바, 모든 정보가 담긴 테이블 전부 사용할 수 있도록 하면 안되기 때문에
 일부 정보에만 접근을 허용하여 불필요한 정보노출을 막을 수 있다.

2. 복잡한 SQL을 단순하게 만들 수 있다.
 뷰 작성시 조건을 사용하게 되면 그 뷰를 통한 또 다른 SQL구문은 좀 더 단순해지는 효과를 얻을 수 있다.

- 뷰의 실제 사용 -
실무에서는 좀 더 복잡하게 사용된다.

CREATE VIEW v_viewtest1
AS 
	SELECT B.mem_id 'MEMBER ID', M.mem_name 'Member Name',
	       B.prod_name 'Product Name',
           CONCAT(M.phone1,M.phone2) 'Dffice Phone'
    FROM buy B
		INNER JOIN member M
        ON B.mem_id = M.mem_id;
SELECT DISTINCT `Member ID`, `Member Name` FROM v_viewtest1;

DROP VIEW v_member; 뷰 삭제

DESCRIBE v_viewtest1; 뷰 구조보기

뷰로 데이터 수정/삭제
UPDATE v_viewtest1 SET `Member Name` = 'Black Pink'
WHERE `Member Name` = '블랙핑크';

DELETE 
FROM v_viewtest1
WHERE `Member Name` = 'Apink';



































